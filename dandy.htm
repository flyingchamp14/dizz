<DOCTYPE!html>
<html>

<head>





<style>

/* Add a black background color to the top navigation */
.topnav {
  background-color: #333;
  overflow: hidden;
  text-align:center;
}

/* Style the links inside the navigation bar */
.topnav a {
  float: left;
  color: #f2f2f2;
  text-align: center;
  padding: 14px 16px;
  text-decoration: none;
  font-size: 17px;
}

/* Change the color of links on hover */
.topnav a:hover {
  background-color: #ddd;
  color: black;
}


.topnav a.active {
  background-color: #4CAF50;
  color: white;
}




body {
  background-color: #BFF261;
    text-align:center
}

#txtid {
  font-family: 'Fredoka One', cursive;
  color:#ff6969;
}
</style>

</head>


<body>
<div class="topnav">
  <a href="game.html">   &larr;  Back To Game Hub</a>
</div>









<p id= txtid> <b> Welcome to Dandy Crush (Dizz Candy Crush) Match the Cup of Lemonade, Eco Friendly Leaf, The Smiley Face, the Ingredient Strawberry, and the Lemonade Pill with others of their own kind! Enjoy and please click the order button on the navigation bar! </p>


<script>
var gc = new GameCanvas();

var grid = new Grid(10, 10, 50);

var lastMouse = {x: 0, y: 0};
var downPos;

function loop() {
  clearScreen();
  
  grid.update();
  grid.render();
  
  lastMouse.x = mouse.x;
  lastMouse.y = mouse.y;
}

function OnMouseDown() {
  downPos = {x: mouse.x - grid.offset.x, y: mouse.y - grid.offset.y};
}

function OnMouseUp() {
  var a = getAngle(mouse.x - grid.offset.x, mouse.y - grid.offset.y, downPos.x, downPos.y) / Math.PI * 180 + 180;
  var dir;
  if (a > 315)
    dir = {x: 1, y: 0}
  else if (a > 225)
    dir = {x: 0, y: -1};
  else if (a > 165)
    dir = {x: -1, y: 0};
  else if (a > 75)
    dir = {x: 0, y: 1};
  else
    dir = {x: 1, y: 0};
  grid.switchAtMouse(downPos.x, downPos.y, dir.x, dir.y);
}

function Grid(w, h, scale) {
  var _this = this;
  this.width = w;
  this.height = h;
  this.scale = scale;
  
  this.offset = {x: width / 2 - this.width / 2 * this.scale, y: height / 2 - this.height / 2 * this.scale};
  
  this.typeImages = ["ü•§", "üåø", "üçã", "üíä", "üçì", "üôÇ"];
  
  this.animations = [];
  
  this.cells = new Array(this.width);
  for (var i = 0; i < this.cells.length; i++) {
    this.cells[i] = new Array(this.height);
    for (var j = 0; j < this.cells[i].length; j++) {
      this.cells[i][j] = new Object(Math.floor(Math.random() * this.typeImages.length));
    }
  }
 
  this.update = function() {
    for (var y = 0; y < this.height; y++) {
      for (var x = 0; x < this.width; x++) {
        var c = this.cells[x][y];
        if (c != "EMPTY") {
          if (this.cells[x][y + 1] && this.cells[x][y + 1] == "EMPTY") {
            this.cells[x][y + 1] = new Object(this.cells[x][y].type);
            if (this.cells[x][y + 2] != "EMPTY") {
              this.animations.push(new Animation(this.cells[x][y].type, {x, y}, {x, y: y + 1}));
            }
            this.cells[x][y] = "EMPTY";
          }
        }
      }
    }
  }
  
  this.render = function() {
    for (var y = 0; y < this.height; y++) {
      for (var x = 0; x < this.width; x++) {
        rect(this.offset.x + x * this.scale, this.offset.y + y * this.scale, this.scale, this.scale, "", "black");
        
        if (this.cells[x][y] != "EMPTY")
          this.cells[x][y].render(this.offset.x + (x + 0.1) * this.scale, this.offset.y + (y + 0.7) * this.scale, this.scale * 0.6);
      }
    }
    
    for (var i = 0; i < this.animations.length; i++) {
      var a = this.animations[i];
      a.update();
      a.render();
    }
  }
  
  this.switchAtMouse = function(mousex, mousey, xDir, yDir, undoFlag = true) {  
    var x = Math.floor(mousex / grid.scale);
    var y = Math.floor(mousey / grid.scale);
    
    if (this.isDefined(x, y) &&
        this.isDefined(x + xDir, y + yDir) &&
        !this.cells[x][y].hidden && !this.cells[x + xDir][y + yDir].hidden &&
        this.cells[x][y] != "EMPTY" &&
        this.cells[x + xDir][y + yDir] != "EMPTY") {
      this.animations.push(new Animation(this.cells[x][y].type, {x, y}, {x: x + xDir, y: y + yDir}));
      this.animations.push(new Animation(this.cells[x + xDir][y + yDir].type, {x: x + xDir, y: y + yDir}, {x, y}));

      grid.switchCells(x, y, x + xDir, y + yDir);

      this.cells[x][y].hidden = true;
      this.cells[x + xDir][y + yDir].hidden = true;

      setTimeout(function() {
        if (!_this.removeNeighbors(x + xDir, y + yDir) && undoFlag) {
          _this.switchAtMouse(mousex, mousey, xDir, yDir, false);
        }
      }, 400);
    }
  }
  
  this.switchCells = function(x1, y1, x2, y2) {
    if (this.cells[x1] && this.cells[x1][y1] &&
        this.cells[x2] && this.cells[x2][y2]) {
      var tmp = this.cells[x1][y1];
      this.cells[x1][y1] = this.cells[x2][y2];
      this.cells[x2][y2] = tmp;
      return true;
    }
    return false;
  }
  
  this.removeNeighbors = function(x, y) {
    var cells = [];
    var neighbors = 0;
    
    var offsetX = 1;
    while (this.isDefined(x + offsetX, y) && this.cells[x + offsetX][y].type == this.cells[x][y].type) {
      cells.push({x: x + offsetX, y: y});
      neighbors++;
      offsetX++;
    }
    var offsetX = 1;
    while (this.isDefined(x - offsetX, y) && this.cells[x - offsetX][y].type == this.cells[x][y].type) {
      cells.push({x: x - offsetX, y: y});
      neighbors++;
      offsetX++;
    }
    
    var offsetY = 1;
    while (this.isDefined(x, y + offsetY) && this.cells[x][y + offsetY].type == this.cells[x][y].type) {
      cells.push({x: x, y: y + offsetY});
      neighbors++;
      offsetY++;
    }
    var offsetY = 1;
    while (this.isDefined(x, y - offsetY) && this.cells[x][y - offsetY].type == this.cells[x][y].type) {
      cells.push({x: x, y: y - offsetY});
      neighbors++;
      offsetY++;
    }
    
    if (neighbors >= 2) {
      for (var i = 0; i < cells.length; i++) {
        console.log(cells[i]);
        this.cells[cells[i].x][cells[i].y] = "EMPTY";
      }
      this.cells[x][y] = "EMPTY";
      return true;
    }
    return false;
  }
  
  this.isDefined = function(x, y) {
    return this.cells[x] && this.cells[x][y];
  }
  
  function Object(type) {
    this.type = type;
    this.image = _this.typeImages[this.type];
    this.hidden = false;
    
    this.render = function(x, y, scale) {
      if (!this.hidden)
        text(this.image, x, y, scale, "#000");
    }
  }
  
  function Animation(type, from, to) {
    this.type = type;
    this.image = _this.typeImages[this.type];
    this.from = from;
    this.pos = JSON.parse(JSON.stringify(from));
    this.to = to;
    
    this.render = function() {
      text(this.image, _this.offset.x + (this.pos.x + 0.1) * _this.scale, _this.offset.y + (this.pos.y + 0.7) * _this.scale, _this.scale * 0.6, "#000");
    }
    
    this.update = function() {
      var a = getAngle(this.from.x, this.from.y, this.to.x, this.to.y);
      this.pos.x += Math.cos(a) * 0.09;
      this.pos.y += Math.sin(a) * 0.09;
      
      if (this.distLessThan(0.1))
        _this.animations.splice(_this.animations.indexOf(this), 1);
      if (this.distLessThan(0.2))
        _this.cells[this.from.x][this.from.y].hidden = false;
    }
    
    this.distLessThan = function(a) {
      return Math.abs(this.pos.x - this.to.x) <= a && Math.abs(this.pos.y - this.to.y) <= a;
    }
  }
}

</script>

</body>


</html>
